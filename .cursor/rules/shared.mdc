---
description: 
globs: 
alwaysApply: true
---
# AI Rules for Pick me up

PackMeUp is a web application that helps users pack efficiently for trips. The main task of the application is to generate personalized packing lists tailored to the type of trip, number of people, planned activities, and available luggage capacity.

## Tech Stack

- Astro
- TypeScript 5
- React 19
- Tailwind 4
- Shadcn/ui
- FastAPI
- SQLAlchemy

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `frontend` - a frontend app root directory
- `forntend/src` - source code for frontend
- `frontend/src/layouts` - Astro layouts
- `frontend/src/pages` - Astro pages
- `frontend/src/types.ts` - Shared types for backend and frontend (Entities, DTOs)
- `frontend/src/components` - Client-side components written in Astro (static) and React (dynamic)
- `frontend/src/components/ui` - Client-side components from Shadcn/ui
- `frontend/src/lib` - Frontend services and helpers 
- `frontend/src/assets` - static internal assets
- `frotnend/public` - public assets
- `backend` - a backend app root directory
- `backend/app` - source code for backend
- `backend/app/main.py` - an entry file for backend
- `backend/app/models.py` - the database models definition
- `backend/app/alembic` - a directory for alembic revision
- `backend/app/crud.py` - a file with basic db operations
- `backend/app/api` - a directory for backend endpoints
- `backend/app/services` - a directory for backend services

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
