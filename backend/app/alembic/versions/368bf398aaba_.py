"""Empty message.

Revision ID: 368bf398aaba
Revises:
Create Date: 2025-04-26 22:59:20.709140

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "368bf398aaba"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "items",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("weight", sa.Numeric(precision=5, scale=3), nullable=True),
        sa.Column("dimensions", sa.String(), nullable=True),
        sa.Column("category", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint("weight >= 0", name="check_item_weight_non_negative"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "tags",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=True),
        sa.Column("last_name", sa.String(), nullable=True),
        sa.Column(
            "is_admin", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "special_lists",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("category", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_special_lists_name"), "special_lists", ["name"], unique=False
    )
    op.create_index(
        op.f("ix_special_lists_user_id"), "special_lists", ["user_id"], unique=False
    )
    op.create_table(
        "trips",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("destination", sa.String(), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=True),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.Column("duration_days", sa.Integer(), nullable=False),
        sa.Column("num_adults", sa.Integer(), server_default="1", nullable=False),
        sa.Column("children_ages", postgresql.ARRAY(sa.Integer()), nullable=True),
        sa.Column("accommodation", sa.String(), nullable=True),
        sa.Column("catering", postgresql.ARRAY(sa.Integer()), nullable=True),
        sa.Column("transport", sa.String(), nullable=True),
        sa.Column("activities", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("season", sa.String(), nullable=True),
        sa.Column(
            "available_luggage", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint("duration_days > 0", name="check_trip_duration_positive"),
        sa.CheckConstraint(
            "num_adults >= 0", name="check_trip_num_adults_non_negative"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_trips_user_id"), "trips", ["user_id"], unique=False)
    op.create_table(
        "generated_lists",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("trip_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["trip_id"], ["trips.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_generated_lists_trip_id"), "generated_lists", ["trip_id"], unique=True
    )
    op.create_index(
        op.f("ix_generated_lists_user_id"), "generated_lists", ["user_id"], unique=False
    )
    op.create_table(
        "special_list_items",
        sa.Column("special_list_id", sa.UUID(), nullable=False),
        sa.Column("item_id", sa.UUID(), nullable=False),
        sa.Column("quantity", sa.Integer(), server_default="1", nullable=False),
        sa.CheckConstraint(
            "quantity > 0", name="check_special_list_item_quantity_positive"
        ),
        sa.ForeignKeyConstraint(["item_id"], ["items.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["special_list_id"], ["special_lists.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("special_list_id", "item_id"),
    )
    op.create_index(
        op.f("ix_special_list_items_item_id"),
        "special_list_items",
        ["item_id"],
        unique=False,
    )
    op.create_table(
        "special_list_tags",
        sa.Column("special_list_id", sa.UUID(), nullable=False),
        sa.Column("tag_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["special_list_id"], ["special_lists.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["tag_id"], ["tags.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("special_list_id", "tag_id"),
    )
    op.create_table(
        "trip_tags",
        sa.Column("trip_id", sa.UUID(), nullable=False),
        sa.Column("tag_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["tag_id"], ["tags.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["trip_id"], ["trips.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("trip_id", "tag_id"),
    )
    op.create_table(
        "generated_list_items",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("generated_list_id", sa.UUID(), nullable=False),
        sa.Column("item_id", sa.UUID(), nullable=True),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column(
            "is_packed", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column("item_name", sa.String(), nullable=False),
        sa.Column("item_weight", sa.Numeric(precision=5, scale=3), nullable=True),
        sa.Column("item_dimensions", sa.String(), nullable=True),
        sa.Column("item_category", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "item_weight >= 0", name="check_gen_list_item_weight_non_negative"
        ),
        sa.CheckConstraint(
            "quantity > 0", name="check_gen_list_item_quantity_positive"
        ),
        sa.ForeignKeyConstraint(
            ["generated_list_id"], ["generated_lists.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["item_id"], ["items.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_generated_list_items_generated_list_id"),
        "generated_list_items",
        ["generated_list_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_generated_list_items_item_id"),
        "generated_list_items",
        ["item_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_generated_list_items_item_id"), table_name="generated_list_items"
    )
    op.drop_index(
        op.f("ix_generated_list_items_generated_list_id"),
        table_name="generated_list_items",
    )
    op.drop_table("generated_list_items")
    op.drop_table("trip_tags")
    op.drop_table("special_list_tags")
    op.drop_index(
        op.f("ix_special_list_items_item_id"), table_name="special_list_items"
    )
    op.drop_table("special_list_items")
    op.drop_index(op.f("ix_generated_lists_user_id"), table_name="generated_lists")
    op.drop_index(op.f("ix_generated_lists_trip_id"), table_name="generated_lists")
    op.drop_table("generated_lists")
    op.drop_index(op.f("ix_trips_user_id"), table_name="trips")
    op.drop_table("trips")
    op.drop_index(op.f("ix_special_lists_user_id"), table_name="special_lists")
    op.drop_index(op.f("ix_special_lists_name"), table_name="special_lists")
    op.drop_table("special_lists")
    op.drop_table("users")
    op.drop_table("tags")
    op.drop_table("items")
    # ### end Alembic commands ###
