name: CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  frontend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-frontend
      - name: Debug Node environment
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Working directory: $(pwd)"
          echo "Frontend directory contents:"
          ls -la frontend/
        shell: bash
      - name: Run linter
        run: cd frontend && npm run lint

  frontend-tests:
    runs-on: ubuntu-latest
    needs: frontend-lint
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-frontend
      - name: Run unit tests
        run: cd frontend && npm test
      
      - name: Install Playwright browsers
        run: cd frontend && npx playwright install --with-deps chromium
      
      - name: Run E2E tests
        run: cd frontend && npm run test:e2e

  frontend-build:
    runs-on: ubuntu-latest
    needs: frontend-tests
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-frontend
      - name: Build frontend
        run: cd frontend && npm run build
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1

  backend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-backend
      - name: Run Ruff linter
        run: cd backend && uv run ruff check .
      
      - name: Run type checking (mypy)
        run: cd backend && uv run mypy app

  backend-tests:
    runs-on: ubuntu-latest
    needs: backend-lint
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-backend
      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: cd backend && uv run pytest tests -v

  # deploy:
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/master'
  #   needs: [frontend-build, backend-tests]
  #   environment: ${{ github.event.inputs.environment || 'development' }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Download frontend build artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: frontend-build
  #         path: frontend/dist
  #     
  #     - name: Deploy to Render
  #       run: echo "Deployment to ${{ github.event.inputs.environment || 'development' }} would happen here"
  #       # Actual deployment steps would go here
  #       # For example:
  #       # - name: Deploy to Render
  #       #   uses: JorgeLNJunior/render-deploy@v1.4.3
  #       #   with:
  #       #     service_id: ${{ secrets.RENDER_SERVICE_ID }}
  #       #     api_key: ${{ secrets.RENDER_API_KEY }}
  #       #     wait_deploy: true
  #       #     github_token: ${{ secrets.GITHUB_TOKEN }} 